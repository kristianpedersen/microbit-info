{"version":3,"sources":["Canvas.js","Connection.js","Utils.js","SendMidi.js","SimpleLogWindow.js","MessageHandler.js","Options.js","App.js","index.js"],"names":["styled","canvas","device","msg","Connection","formRef","numberOfReceivedMessages","setKeys","setMessages","setMicrobit","a","navigator","usb","requestDevice","filters","open","selectConfiguration","claimInterface","readLoop","close","getKeysAndValuesFromString","msgString","split","reduce","total","current","index","array","key","i","thisChar","includes","unshift","value","length","join","slice","push","transferIn","results","decoder","TextDecoder","receivedData","decode","data","trim","m","String","prev","d","Date","hour","getHours","minutes","getMinutes","padStart","seconds","getSeconds","time","undefined","labels","querySelectorAll","label","filter","l","id","querySelector","checked","Set","onClick","clamp","min","max","ListMidiDevices","messages","ranges","h1","useRef","errorMessage","smoothValue","useState","midiDevices","setMidiDevices","selectedDevice","setSelectedDevice","useEffect","WebMidi","enable","err","innerText","outputs","innerHTML","lastMessage","normalizedValue","srcMin","srcMax","destMin","destMax","mappedValue","map","isNaN","sendControlChange","playNote","setTimeout","stopNote","ref","deviceName","name","replaceAll","Label","htmlFor","getOutputByName","type","SimpleLogWindow","keys","microbit","productName","uuidv4","textarea","MessageHandler","logWindow","setRanges","allProps","Options","setMessageRange","event","target","Number","KeyForm","KeyLabel","style","padding","border","display","defaultChecked","RangeSpan","onChange","form","span","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.815bafc5.chunk.js","sourcesContent":["// https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n\nimport { useEffect, useRef } from \"react\"\nimport styled from \"styled-components\"\n\nexport default function Canvas({ messages }) {\n\tconst canvasRef = useRef(null)\n\n\tuseEffect(() => {\n\t\tlet t = 0\n\t\tconst canvas = canvasRef.current\n\t\tconst [width, height] = [canvas.width, canvas.height]\n\t\tconst c = canvas.getContext(\"2d\")\n\t\tconst rnd255 = () => Math.floor(Math.random() * 255)\n\n\t\tfunction loop() {\n\n\t\t\tt++\n\t\t\tif (t % 60 === 0) {\n\t\t\t\trequestAnimationFrame(loop)\n\t\t\t}\n\t\t}\n\t\tloop()\n\t}, [])\n\n\treturn <MyCanvas ref={canvasRef}></MyCanvas>\n}\n\nconst MyCanvas = styled.canvas`\n\tborder: 1px solid black;\n\tposition: absolute;\n\tright: 0;\n\ttop: 0;\n`","let device\nlet msg = \"\"\n\nexport default function Connection({\n\tformRef,\n\tnumberOfReceivedMessages,\n\tsetKeys,\n\tsetMessages,\n\tsetMicrobit\n}) {\n\t// User action is required to connect to WebUSB\n\tasync function connect() {\n\t\tdevice = await navigator.usb.requestDevice({\n\t\t\tfilters: [{ \"vendorId\": 0x0d28 }]\n\t\t})\n\t\tawait device.open()\n\t\tawait device.selectConfiguration(1)\n\t\tawait device.claimInterface(2)\n\t\tsetMicrobit(device)\n\t\treadLoop()\n\t}\n\n\tasync function disconnect() {\n\t\tawait device.close()\n\t}\n\n\tfunction getKeysAndValuesFromString(msgString) {\n\t\tconst chars = msgString.split(\"\")\n\t\t// During tests, I would sometimes get several messages in one go, for example, \"x:100y:200z:300\".\n\t\t// If current === \":\"\n\t\t// To find the key, loop backwards, concatenate, and break if the character is a number.\n\t\t// To find the value, loop forwards, concatenate, and break if the character is not \"-\" or a number.\n\t\treturn chars.reduce((total, current, index, array) => {\n\t\t\tif (current === \":\") {\n\t\t\t\tlet key = []\n\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\tconst thisChar = array[i]\n\t\t\t\t\tif (\"0123456789\".split(\"\").includes(thisChar) && i < index - 1) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tkey.unshift(thisChar)\n\t\t\t\t}\n\n\t\t\t\tlet value = \"\"\n\t\t\t\tfor (let i = index + 1; i < array.length; i++) {\n\t\t\t\t\tconst thisChar = array[i]\n\t\t\t\t\tif (!\"0123456789-\".split(\"\").includes(thisChar)) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tvalue += thisChar\n\t\t\t\t}\n\t\t\t\tkey = key.join(\"\").slice(0, -1)\n\t\t\t\ttotal.push(`${key}: ${value}`)\n\t\t\t}\n\t\t\treturn total\n\t\t}, [])\n\n\t}\n\n\tasync function readLoop() {\n\t\tnumberOfReceivedMessages.current++\n\t\tconst results = await device.transferIn(4, 64)\n\t\tconst decoder = new TextDecoder()\n\t\tconst receivedData = decoder.decode(results.data).trim()\n\n\t\tif (receivedData.length > 0) {\n\t\t\tmsg += receivedData\n\t\t} else {\n\t\t\tmsg = getKeysAndValuesFromString(msg)\n\t\t\tif (msg.length > 0) {\n\t\t\t\tfor (let m of msg) {\n\t\t\t\t\tconst key = String(m).split(\":\")[0].trim()\n\n\t\t\t\t\tsetMessages(prev => {\n\t\t\t\t\t\tconst d = new Date()\n\t\t\t\t\t\tconst hour = d.getHours()\n\t\t\t\t\t\tconst minutes = String(d.getMinutes()).padStart(2, \"0\")\n\t\t\t\t\t\tconst seconds = String(d.getSeconds()).padStart(2, \"0\")\n\t\t\t\t\t\tconst time = `${hour}:${minutes}:${seconds}`\n\n\t\t\t\t\t\tif (prev === undefined) {\n\t\t\t\t\t\t\treturn [{ time, msg: m }]\n\t\t\t\t\t\t} else if (m !== \"\") {\n\t\t\t\t\t\t\tconst labels = [...formRef.current.querySelectorAll(\"label\")]\n\t\t\t\t\t\t\tconst key = m.split(\":\")[0]\n\t\t\t\t\t\t\tconst label = labels.filter(l => l.id === key)[0]\n\n\t\t\t\t\t\t\tif (label !== undefined) {\n\t\t\t\t\t\t\t\tconst input = label.querySelector(\"input\")\n\t\t\t\t\t\t\t\tif (input.checked) {\n\t\t\t\t\t\t\t\t\treturn [...prev.slice(-10), { time, msg: m }]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn prev\n\t\t\t\t\t})\n\n\t\t\t\t\tif (numberOfReceivedMessages.current > 100) {\n\t\t\t\t\t\tsetKeys(prev => [...new Set([...prev, key])])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmsg = \"\"\n\t\t}\n\t\treadLoop()\n\t}\n\n\tfunction clear() {\n\t\tsetKeys([])\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={connect}>Connect micro:bit</button>\n\t\t\t<button onClick={disconnect}>Disconnect</button>\n\t\t\t<button onClick={clear}>Clear keys</button> {/*Messages arrive incomplete under rare circumstances*/}\n\t\t</div>\n\t)\n}","// Converts a number from one range to another\nexport function map(value, srcMin, srcMax, destMin, destMax, clamped = false) {\n\tlet mappedValue = (value - srcMin) * (destMax - destMin) / (srcMax - srcMin) + destMin\n\n\tif (clamped) {\n\t\treturn clamp(mappedValue, destMin, destMax)\n\t}\n\n\treturn mappedValue\n}\n\nexport function clamp(value, min, max) {\n\tif (value < min) {\n\t\treturn min\n\t} else if (value > max) {\n\t\treturn max\n\t}\n\treturn value\n}\n","import { useEffect, useRef, useState } from \"react\"\nimport styled from \"styled-components\"\nimport WebMidi from \"webmidi\"\nimport { clamp, map } from \"./Utils\"\n\nexport default function ListMidiDevices({ messages, ranges }) {\n\tconst h1 = useRef(null)\n\tconst errorMessage = useRef(null)\n\tlet smoothValue = useRef(0)\n\tconst [midiDevices, setMidiDevices] = useState([])\n\tconst [selectedDevice, setSelectedDevice] = useState()\n\n\tuseEffect(function midiSetup() {\n\t\tWebMidi.enable(err => {\n\t\t\tif (err) {\n\t\t\t\th1.current.innerText = \"Web MIDI works best in Google Chrome\"\n\t\t\t\terrorMessage.innerText = err\n\t\t\t} else {\n\t\t\t\tif (WebMidi.outputs.length === 0) {\n\t\t\t\t\th1.current.innerHTML = \"You need to set up a virtual MIDI port: <a href='https://help.ableton.com/hc/en-us/articles/209774225-How-to-setup-a-virtual-MIDI-bus'>Instructions</a>\"\n\t\t\t\t} else {\n\t\t\t\t\tsetMidiDevices(() => WebMidi.outputs)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}, [])\n\n\tuseEffect(function sendMidi() {\n\t\tif (selectedDevice === undefined || messages.length === 0) {\n\t\t\treturn\n\t\t}\n\n\t\tconst lastMessage = messages[0].msg.split(\":\")[1]\n\t\tconst normalizedValue = map(lastMessage,\n\t\t\t(ranges[\"min-from\"] || 0),\n\t\t\t(ranges[\"max-from\"] || 0),\n\t\t\t0, 127, true) // \"true\" = prevent output value from going out of bounds\n\n\t\tif (!isNaN(lastMessage) && !isNaN(normalizedValue)) {\n\t\t\tsmoothValue.current += (normalizedValue - smoothValue.current) * 0.25\n\t\t\tselectedDevice.sendControlChange(0, clamp(smoothValue.current, 0, 127))\n\t\t}\n\t}, [messages, ranges, selectedDevice])\n\n\tuseEffect(function playNoteWhenDeviceChanges() {\n\t\tif (selectedDevice === undefined) {\n\t\t\treturn\n\t\t} else {\n\t\t\tselectedDevice.playNote(\"C5\")\n\t\t\tsetTimeout(() => {\n\t\t\t\tselectedDevice.stopNote(\"C5\")\n\t\t\t}, 100)\n\t\t}\n\t}, [selectedDevice])\n\n\tfunction selectDevice(name) {\n\t\tsetSelectedDevice(WebMidi.getOutputByName(name))\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h1 ref={h1}>MIDI device</h1>\n\t\t\t<form>\n\t\t\t\t{midiDevices.length > 0 && midiDevices.map(device => {\n\t\t\t\t\tconst deviceName = device.name.replaceAll(\" \", \"-\")\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Label htmlFor={deviceName} onClick={() => selectDevice(device.name)}>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid={deviceName}\n\t\t\t\t\t\t\t\tname=\"midi-device\"\n\t\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{device.name}\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t)}\n\t\t\t\t<p ref={errorMessage}></p>\n\t\t\t</form>\n\t\t</>\n\t)\n}\n\nconst Label = styled.label`\n\tbackground-color: white;\n\tborder: 1px solid #333;\n\tpadding: 1rem;\n`","import { useEffect, useRef } from \"react\"\nimport { v4 as uuidv4 } from 'uuid';\nimport styled from \"styled-components\"\n\nexport default function SimpleLogWindow({\n\tformRef,\n\tkeys,\n\tmessages,\n\tmicrobit,\n\tnumberOfReceivedMessages,\n}) {\n\treturn (\n\t\t<div>\n\t\t\t{microbit === undefined\n\t\t\t\t? <h1>Click connect button</h1>\n\t\t\t\t: <h1>{microbit.productName}</h1>\n\t\t\t}\n\t\t\t{messages.map(m => {\n\t\t\t\tif (numberOfReceivedMessages.current > 100) {\n\t\t\t\t\treturn <p key={uuidv4()}>{`${m.time} / ${m.msg}`}</p>\n\t\t\t\t} else {\n\t\t\t\t\treturn <p>loading ...</p>\n\t\t\t\t}\n\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n\n}\n\nconst LoggingWindow = styled.textarea`\n\twidth: 20%;\n\theight: 90vh;\n\tmargin-top: 1rem;\n`","import { useRef, useState } from \"react\"\nimport Connection from \"./Connection\"\nimport SendMidi from \"./SendMidi\"\nimport SimpleLogWindow from \"./SimpleLogWindow\"\n\nexport default function MessageHandler({\n\tformRef,\n\tnumberOfReceivedMessages,\n\tkeys, setKeys,\n\tranges, setRanges\n}) {\n\tconst logWindow = useRef()\n\tconst [microbit, setMicrobit] = useState()\n\tconst [messages, setMessages] = useState([])\n\n\tconst allProps = {\n\t\tformRef,\n\t\tlogWindow,\n\t\tnumberOfReceivedMessages,\n\t\tkeys, setKeys,\n\t\tmessages, setMessages,\n\t\tmicrobit, setMicrobit,\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Connection {...allProps} />\n\t\t\t<SendMidi {...{ messages, ranges }} />\n\t\t\t<SimpleLogWindow {...allProps} />\n\t\t</>\n\t)\n}","import { v4 as uuidv4 } from 'uuid'\nimport styled from \"styled-components\"\n\nexport default function Options({ formRef, keys, ranges, setRanges }) {\n\tfunction setMessageRange(event) {\n\t\tsetRanges(prev => ({ ...prev, [event.target.id]: Number(event.target.value) }))\n\t}\n\n\treturn (\n\t\t<KeyForm ref={formRef}>\n\t\t\t{([...keys].map(key => {\n\t\t\t\tconst id = uuidv4()\n\t\t\t\treturn (\n\t\t\t\t\t<KeyLabel\n\t\t\t\t\t\thtmlFor={id}\n\t\t\t\t\t\tid={key}\n\t\t\t\t\t\tname={id}\n\t\t\t\t\t\tstyle={{ padding: \"1rem\", border: \"1px solid\", display: \"inline-block\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<input type=\"checkbox\" name={id} id={id} defaultChecked />\n\t\t\t\t\t\t{key}\n\t\t\t\t\t\t<RangeSpan>\n\t\t\t\t\t\t\tFrom min\n\t\t\t\t\t\t\t<input type=\"number\" name=\"min-from\" id=\"min-from\" onChange={setMessageRange} />\n\t\t\t\t\t\t\tFrom max\n\t\t\t\t\t\t\t<input type=\"number\" name=\"max-from\" id=\"max-from\" onChange={setMessageRange} />\n\t\t\t\t\t\t</RangeSpan>\n\t\t\t\t\t</KeyLabel>\n\t\t\t\t)\n\t\t\t})\n\t\t\t)}\n\t\t</KeyForm>\n\t)\n}\n\nconst KeyForm = styled.form`\n\tpadding: 1rem;\n\tpadding-left: 0;\n`\n\nconst KeyLabel = styled.label`\n\tbackground-color: hsl(210, 100%, 90%);\n\tpadding-right: 0;\n`\n\nconst RangeSpan = styled.span`\n\tbackground-color: hsl(30, 100%, 90%);\n\tmargin-left: 1rem;\n\tmargin-right: 0;\n`","import \"./App.css\"\nimport { useRef, useState } from \"react\"\nimport Canvas from \"./Canvas\"\nimport MessageHandler from \"./MessageHandler\"\nimport Options from \"./Options\"\n\nexport default function App() {\n  const formRef = useRef(null)\n  const [ranges, setRanges] = useState({})\n  const [keys, setKeys] = useState([])\n  const numberOfReceivedMessages = useRef(0)\n\n  return (\n    <>\n      <Options {...{ formRef, keys, ranges, setRanges }} />\n      {/* <Canvas /> */}\n      <MessageHandler {...{\n        formRef,\n        numberOfReceivedMessages,\n        keys, setKeys,\n        ranges, setRanges,\n      }} />\n    </>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}